##########     SCRIPTING EVALUATION    ##########


##### first script
#Wright script that creates the directories structure for data analysis in your user area in the servers

##### second script
#Wright one (or more) scripts that allow you to process your pair end fastq samples (assume a large number greater than 100) with in a reproductible and portable way to other datasets with minimal changes. Script that allow you to know how many reads are there before and after your actions and how many were discard. The results should be in a file where each sample is identified. All your proceeding should be record in a file.

##### thrid script
#Wright an additional script related with this process at your will, and can be embedded in the former ones.

	##### second week
	#fastqc/fastp/multiqc











#######################     first script     #####################




#!/bin/bash

# Script to generate directory "tree"/structure.


MAIN="$HOME/data_IBBCscripts"                       # Main directory where all in and outputs will be stored 
RAW_DATA="$MAIN/raw_data"                           # Subdirectory for raw data
FASTQC_RESULTS="$MAIN/fastqc_results"               # Subdirectory for first fastqc results
FASTP_RESULTS="$MAIN/fastp_results"                 # Subdirectory fastp results
FASTQC_FP_RESULTS="$MAIN/fastqc_fp_results"         # Subdirectory for the second fastqc results on fastp results
MULTIQC_RESULTS="$MAIN/multiqc_results"             # Subdirectory for multiqc results


# Function that creates the directories; if it fails it prints an error message; if it succeeds it prints a success message

create_directory_tree() {
    local dir
    for dir in "$RAW_DATA" "$FASTQC_RESULTS" "$FASTP_RESULTS" "$FASTQC_FP_RESULTS" "$MULTIQC_RESULTS"; do
        mkdir -p "$dir" || {                         # Creates the directories and the parent directory if they don't exist
            printf "Error: Failed to create directory %s\n" "$dir" >&2       # Prints an error message if mkdir fails to inform the user   
            return 1                                 # Exits the function (stops execution) with a non-zero (= insuccess) status
        } 
    done
    printf "Directory structure successfully created in %s\n" "$MAIN"    # Prints a success message
}
# %s = placeholder for variable  # >&2 redirects the output of a command to the stderr stream


main_check() {
    if [[ ! -d "$MAIN" ]]; then        # Checks if the base directory doesn't already exists      # ! negation  
        create_directory_tree         # Calls the function to create the directory structure
    else
        printf "Directory structure already exists in %s\n" "$MAIN"  # Prints a message if the structure already exists
    fi
}

main_check                                    # Starts the script by calling the main function




		##############   Script Extra - Auto Test   ############


		#!/bin/bash

		# Test script for data_IBBCscripts.sh


		SCRIPT_PATH="$HOME/scripts_IBBC/1_script.sh"


		# Test 1: Clean slate

		printf "Test 1: Clean environment\n"
		rm -rf "$HOME/data_IBBCscripts"          # removes any structure that might exist
		bash "$SCRIPT_PATH"                      # runs the script
		find "$HOME/data_IBBCscripts"            # checks the director structure


		# Test 2: Run again to check "already exists" behavior

		printf "\nTest 2: Directory already exists\n"
		bash "$SCRIPT_PATH"


		

# Debugging
bash -x path/to/your_script.sh     #This shows each command and its result during execution







######## Script 2 Tasks:

# 1- import samples files to $RAW_DATA
# 2- generate .txt file with raw files names (=index)
# 3- conda activate tools_qc
# 4- fastqc …(1).gz …(2).gz
# 5- put fastqc results (= 2*.html + 2*.zip) to directory fastqc_results
# 6- fastp on raw files
# 7- stores fastp results
# 8- fastqc on fastp results
# 9- multiqc on second fastqc results
# 10- generates final report




############### 2nd script   - FASTQC + FASTP + FASTQC + MULTIQC #############




#!/bin/bash


# This scripts allows the analysis of any fastq files the user wishes to input.
# It runs FastQC on the raw *fastq.gz files on a directory that the user will input.
# Then it runs FastP on those same files and re-retun FastQC on FastP results.
# And finaly runs MultiQC on the second FastQC results files.

# All the original data and correspondent results will be stored in directory tree created using 1_script.sh   


# Directories

MAIN="$HOME/data_IBBCscripts"
RAW_DATA="$MAIN/raw_data"
INDEX_FILE="$MAIN/raw_file_index.txt"
FASTQC_RESULTS="$MAIN/fastqc_results"
FASTP_RESULTS="$MAIN/fastp_results"
FASTQC_FP_RESULTS="$MAIN/fastqc_fp_results"
MULTIQC_RESULTS="$MAIN/multiqc_results"
REPORT_FILE="$MAIN/reads_statistics_report.txt"




# Function to copy sample files

copy_sample_files() {
    printf "Enter the directory containing your sample files [example: /home/fcxxxxx/dir1/dir2/ ]: "
    read -r input_dir                                                            # reads path inputed by user

    if [[ ! -d "$input_dir" ]]; then                                             # check if input directory (doesn't) exists
        printf "Error: Directory %s does not exist.\n" "$input_dir" >&2
        return 1
    fi

    cp "$input_dir"/*.gz "$RAW_DATA" || {                                        #copy .gz files from input dir to raw_data      
        printf "Error: Failed to copy files to %s.\n" "$RAW_DATA" >&2            # if it fails it prints error message
        return 1
    }
    printf "Sample files copied to %s.\n" "$RAW_DATA"
}



# Function to activate conda

activate_conda() {
    source "$(conda info --base)/etc/profile.d/conda.sh" || {    # gets/loads conda environment
        printf "Error: Conda not found.\n" >&2
        return 1
    }
    conda activate tools_qc || {                                 
        printf "Error: Conda environment 'tools_qc' not found.\n" >&2
        return 1
    }
}




# Function to run FastQC

run_fastqc() {
    printf "Running FastQC...\n"
    for file in "$RAW_DATA"/*.gz; do                     # for each .gz file in raw_data runs fastqc and puts the results in fastqc_results
        fastqc "$file" -o "$FASTQC_RESULTS" && \
            printf "FastQC succeeded for %s\n" "$file" || \
            printf "FastQC failed for %s\n" "$file" >&2
    done
}



# Function to run Fastp for paired-end reads with flexible matching

run_fastp() {
    printf "Running Fastp for paired-end reads with flexible matching...\n"

    for forward in "$RAW_DATA"/*_1*.gz "$RAW_DATA"/*_R1*.gz; do
        [[ -f "$forward" ]] || continue                     # looks for paired reads

        # Identify the matching reverse read

        reverse="${forward/_1/_2}"
        reverse="${reverse/_R1/_R2}"

        if [[ -f "$reverse" ]]; then                    
            # gets the common part of the sample files for correctly naming outputs
            common_prefix=$(basename "$forward" | sed -E 's/_1.*|_R1.*//')

            # defines output filenames
            output_forward="$FASTP_RESULTS/${common_prefix}_fastp_1.gz"
            output_reverse="$FASTP_RESULTS/${common_prefix}_fastp_2.gz"
            output_json="$FASTP_RESULTS/${common_prefix}.json"
            output_html="$FASTP_RESULTS/${common_prefix}.html"

            # Run Fastp
            fastp -i "$forward" -I "$reverse" \
                  -o "$output_forward" -O "$output_reverse" \
                  --json "$output_json" --html "$output_html" && \
                printf "Fastp succeeded for pair: %s and %s\n" "$forward" "$reverse" || \
                printf "Fastp failed for pair: %s and %s\n" "$forward" "$reverse" >&2
        else
            printf "Warning: No matching reverse read for %s. Skipping.\n" "$forward" >&2
        fi
    done
}



# Function to re-run fastqc on fastp results

run_second_fastqc() {
    printf "Running FastQC on Fastp result files...\n"

    for file in "$FASTP_RESULTS"/*_fastp_*.gz; do     # checks for fastp files (if not goes to next function)
        [[ -f "$file" ]] || continue
    printf "No files found to run fastqc"

        # Run FastQC
        fastqc -o "$FASTQC_FP_RESULTS" "$file" && \
            printf "FastQC succeeded for %s\n" "$file" || \
            printf "FastQC failed for %s\n" "$file" >&2
    done
}



# Function to run multiqc on the second fastqc results

run_multiqc() {
    printf "Running MultiQC on Second FastQC results...\n"

    # Run MultiQC
    if multiqc -o "$MULTIQC_RESULTS" "$FASTQC_FP_RESULTS"; then
        printf "MultiQC succeeded. Results saved in %s\n" "$MULTIQC_RESULTS"
    else
        printf "MultiQC failed. Check the logs for details.\n" >&2
    fi
}



# Function to extract read statistics from fastp JSON 

generate_read_statistics() {
    printf "Generating read statistics report...\n"
    
    # Header for the report file
    printf "Sample\tInitial_Reads\tFinal_Reads\tDiscarded_Reads\n" > "$REPORT_FILE"

    for json_file in "$FASTP_RESULTS"/*.json; do
        [[ -f "$json_file" ]] || continue

        # Extract relevant fields using grep and sed/awk
        local sample_name; sample_name=$(basename "$json_file" | sed -E 's/\.json$//')
        local initial_reads; initial_reads=$(grep -Po '"total_reads":\s*\K[0-9]+' "$json_file" | head -1)
        local final_reads; final_reads=$(grep -Po '"total_reads":\s*\K[0-9]+' "$json_file" | tail -1)
        local discarded_reads=$((initial_reads - final_reads))

        # Append the statistics to the report file
        printf "%s\t%s\t%s\t%s\n" "$sample_name" "$initial_reads" "$final_reads" "$discarded_reads" >> "$REPORT_FILE"
    done

    printf "Read statistics report generated: %s\n" "$REPORT_FILE"
}




# Main workflow 

copy_sample_files || exit 1

	# Create index of .gz files in RAW_DATA

	printf "Generating file index...\n"
	if ! find "$RAW_DATA" -type f -name '*.gz' > "$INDEX_FILE"; then
	    printf "Error: Failed to generate file index from %s.\n" "$RAW_DATA" >&2
	    exit 1
	fi

	if [[ ! -s "$INDEX_FILE" ]]; then
	    printf "No .gz files found in %s. Aborting.\n" "$RAW_DATA" >&2
	    exit 1
	fi

	printf "File index created: %s\n" "$INDEX_FILE"

activate_conda || exit 1
run_fastqc
run_fastp
run_second_fastqc
run_multiqc
generate_read_statistics


















################             Script 3 - Summary and clean up            #########

#!/bin/bash

# Paths and directories
MAIN="$HOME/data_IBBCscripts"
RAW_DATA="$MAIN/raw_data"
FASTQC_RESULTS="$MAIN/fastqc_results"
FASTP_RESULTS="$MAIN/fastp_results"
FASTQC_FP_RESULTS="$MAIN/fastqc_fp_results"
MULTIQC_RESULTS="$MAIN/multiqc_results"

# Function to summarize the directory structure

summarize_directories() {
    printf "Summary of directory structure in %s:\n\n" "$MAIN"
    
    for dir in "$RAW_DATA" "$FASTQC_RESULTS" "$FASTP_RESULTS" "$FASTQC_FP_RESULTS" "$MULTIQC_RESULTS"; do
        if [[ -d "$dir" ]]; then
            printf "%s:\n" "$dir"
            printf "  Number of files: %d\n" "$(find "$dir" -type f | wc -l)"
            printf "  Disk usage: %s\n" "$(du -sh "$dir" | cut -f1)"
            printf "\n"
        else
            printf "Warning: Directory %s does not exist.\n\n" "$dir"
        fi
    done
}

# Function to clean up intermediate files

cleanup_intermediate_files() {
    printf "Would you like to delete intermediate files (e.g., FastQC and raw data)? [Y/N]: "
    read -r response

    if [[ "$response" =~ ^[Yy]$ ]]; then
        printf "Cleaning up intermediate files...\n"
        rm -rf "$RAW_DATA" "$FASTQC_RESULTS" || {
            printf "Error: Failed to clean up directories.\n" >&2
            return 1
        }
        printf "Intermediate files have been removed.\n"
    else
        printf "Cleanup skipped.\n"
    fi
}

# pipeline

summarize_directories
cleanup_intermediate_files
